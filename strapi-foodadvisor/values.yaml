# Default values for strapi-foodadvisor.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


# Default values for backend strapi-foodadvisor.
backend:
  labels:
    app: foodadvisor
    component: backend

  deployment:
    name: foodadvisor-backend
    replicas: 1
    image:
      repository: abrantedevops/foodadvisor-api
      pullPolicy: IfNotPresent
      tag: "1.2.0"
      ports:
        containerPort: 1337
        
  # env for deployment.yaml
  extraEnvs:
    - name: DATABASE_CLIENT
      value: postgres
    - name: DATABASE_HOST
      valueFrom:
        secretKeyRef:
          name: foodadvisor
          key: host
    - name: DATABASE_PORT
      valueFrom:
        secretKeyRef:
          name: foodadvisor
          key: port
    - name: DATABASE_USERNAME
      valueFrom:
        secretKeyRef:
          name: foodadvisor
          key: username
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: foodadvisor
          key: password
    - name: DATABASE_NAME
      valueFrom:
        secretKeyRef:
          name: foodadvisor
          key: database

  service:
    name: foodadvisor-backend
    type: ClusterIP
    ports:
      port: 80
      targetPort: 1337

  secret:
    name: foodadvisor
    host: strapi-foodadvisor-postgresql
    port: "5432"
    username: strapi
    password: strapi
    database: strapi

  ingress:
    name: ingress-backend
    enabled: true
    className: "nginx"
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: foodadvisor.backend
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: foodadvisor-backend
                port:
                  number: 1337
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

# Default values for frontend strapi-foodadvisor.
frontend:
  labels:
    app: foodadvisor
    component: frontend

  deployment:
    name: foodadvisor-frontend
    replicas: 1
    image:
      repository: abrantedevops/foodadvisor-client
      pullPolicy: IfNotPresent
      tag: ""
      ports:
        containerPort: 3000
  
  extraEnvs:
    - name: DATABASE_CLIENT
      value: postgres
    - name: DATABASE_HOST
      value: strapi-foodadvisor-postgresql
    - name: DATABASE_PORT
      value: "5432"
    - name: DATABASE_USERNAME
      value: strapi
    - name: DATABASE_PASSWORD
      value: strapi
    - name: DATABASE_NAME
      value: strapi

  service:
    name: foodadvisor-frontend
    type: ClusterIP
    ports:
      port: 80
      targetPort: 3000

  ingress:
    name: ingress-frontend
    enabled: true
    className: "nginx"
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: foodadvisor.client
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: foodadvisor-frontend
                port:
                  number: 3000
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local


# image:
#   repository: foodadvisor-api
#   pullPolicy: IfNotPresent
#   # Overrides the image tag whose default is the chart appVersion.
#   tag: ""

# imagePullSecrets: []
# nameOverride: ""
# fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

# # Container port for the api container in deployment.yaml
# container:
#   port: 1337

# # First Ingress for the api
# ingress:
#   enabled: true
#   className: "nginx"
#   annotations: {}
#     # kubernetes.io/ingress.class: nginx
#     # kubernetes.io/tls-acme: "true"
#   hosts:
#     - host: foodadvisor.app.com
#       paths:
#         - path: /
#           pathType: ImplementationSpecific
#   tls: []
#   #  - secretName: chart-example-tls
#   #    hosts:
#   #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# # Additional volumes on the output Deployment definition.
# volumes: []
# # - name: foo
# #   secret:
# #     secretName: mysecret
# #     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}


# Dependencies for the chart.yaml
#(For more: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml)

postgresql:
  auth:
    postgresPassword: strapi
    username: strapi
    password: strapi
    database: strapi
